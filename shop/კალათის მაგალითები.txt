class cart


მაგალითები:

def __init__(self, request):

# პირველი ვიზიტი
cart = Cart(request)   # self.cart = {}

# მეორე ვიზიტი
cart = Cart(request)   # self.cart = {'5': {'quantity': 2, 'price': 25.50}}



def add(self, product, quantity=1, override_quantity=False):

# ახალი პროდუქტის დამატება
cart.add(product, quantity=3)
# result: {'5': {'quantity': 3, 'price': '25.50'}}

# რაოდენობის გაზრდა
cart.add(product, quantity=2)
# result: {'5': {'quantity': 5, 'price': '25.50'}}

# რაოდენობის ჩანაცვლება
cart.add(product, quantity=1, override_quantity=True)
# result: {'5': {'quantity': 1, 'price': '25.50'}}



def remove(self, product):

# პროდუქტის წაშლამდე
self.cart = {
  '5': {'quantity': 3, 'price': 25.50},
  '8': {'quantity': 1, 'price': 10.50},
}

cart.remove(product)   # product.id = 5

# პროდუქტის წაშლის შემდეგ
self.cart = {
  '8': {'quantity': 1, 'price': 10.50},
}



def save(self):

# save() მეთოდის გარეშე
self.cart['5']['quantity'] = 10  # შეიძლება არ შეინახოს

# save() მეთოდით
self.cart['5']['quantity'] = 10
self.save()  # 100% შეინახავს



def __iter__(self):

for item in cart:
  print(f"Product: {item['product'].name}")
  print(f"Quantity: {item['quantity']}")
  print(f"Price: {item['price']}")
  print(f"Total: {item['total_price']}")
```

__იტერაციის შედეგი:__

```py
{
  'product': Product(id=5, name='Laptop'),
  'quantity': 2,
  'price': Decimal('25.50'),
  'total_price': Decimal('51.00')
}



def __len__(self):

self.cart = {
  '5': {'quantity': 2, 'price': '25.50'},
  '8': {'quantity': 3, 'price': '10.00'}
}

print(len(cart))  # Output: 5 (2 + 3)



def clear(self):

self.cart = {'5': {'quantity': 2, 'price': '25.50'}}

cart.clear()

# გასუფთავების შემდეგ
self.cart = {}